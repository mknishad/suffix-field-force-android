Index: app/src/main/java/com/suffix/fieldforce/akg/activity/SlideCollectionActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.suffix.fieldforce.akg.activity;\n\nimport android.graphics.BlendMode;\nimport android.graphics.BlendModeColorFilter;\nimport android.graphics.Color;\nimport android.graphics.PorterDuff;\nimport android.location.Location;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.text.Editable;\nimport android.text.TextUtils;\nimport android.text.TextWatcher;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.ProgressBar;\nimport android.widget.Spinner;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.google.android.material.textfield.TextInputLayout;\nimport com.google.gson.Gson;\nimport com.nex3z.togglebuttongroup.SingleSelectToggleGroup;\nimport com.suffix.fieldforce.R;\nimport com.suffix.fieldforce.akg.adapter.CustomArrayAdapter;\nimport com.suffix.fieldforce.akg.adapter.GiftListAdapter;\nimport com.suffix.fieldforce.akg.adapter.GiftListAdapterInterface;\nimport com.suffix.fieldforce.akg.api.AkgApiClient;\nimport com.suffix.fieldforce.akg.api.AkgApiInterface;\nimport com.suffix.fieldforce.akg.database.manager.RealMDatabaseManager;\nimport com.suffix.fieldforce.akg.model.AkgLoginResponse;\nimport com.suffix.fieldforce.akg.model.CustomerData;\nimport com.suffix.fieldforce.akg.model.GlobalSettings;\nimport com.suffix.fieldforce.akg.model.Slider;\nimport com.suffix.fieldforce.akg.model.product.GiftModel;\nimport com.suffix.fieldforce.akg.util.LocationUtils;\nimport com.suffix.fieldforce.preference.FieldForcePreferences;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport io.nlopez.smartlocation.OnLocationUpdatedListener;\nimport io.nlopez.smartlocation.SmartLocation;\nimport okhttp3.Credentials;\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\npublic class SlideCollectionActivity extends AppCompatActivity {\n\n  private static final String TAG = \"SlideCollectionActivity\";\n\n  @BindView(R.id.toolbar)\n  Toolbar toolbar;\n\n  @BindView(R.id.recyclerView)\n  RecyclerView recyclerView;\n\n  @BindView(R.id.toggleGroup)\n  SingleSelectToggleGroup toggleGroup;\n\n  @BindView(R.id.spinnerUsers)\n  Spinner spinnerUsers;\n\n  @BindView(R.id.btnSubmit)\n  Button btnSubmit;\n\n  @BindView(R.id.txtQuantity)\n  TextInputLayout txtQuantity;\n\n  @BindView(R.id.progress_bar)\n  ProgressBar progressBar;\n\n  private FieldForcePreferences preferences;\n  private AkgLoginResponse loginResponse;\n  private ArrayAdapter<CustomerData> spinnerAdapter;\n  private List<CustomerData> customerDataList;\n  private List<CustomerData> filteredCustomerList;\n  private RealMDatabaseManager realMDatabaseManager;\n  private CustomerData selectedCustomer;\n  private AkgApiInterface apiInterface;\n  private String basicAuthorization;\n  private GiftListAdapter giftListAdapter;\n  private List<GiftModel> giftModelList;\n\n  private boolean isInputChangedByUser = true;\n\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_slide_collection);\n    ButterKnife.bind(this);\n\n    setupToolbar();\n\n    realMDatabaseManager = new RealMDatabaseManager();\n    preferences = new FieldForcePreferences(this);\n    loginResponse = new Gson().fromJson(preferences.getLoginResponse(), AkgLoginResponse.class);\n    customerDataList = new ArrayList<>();\n    giftModelList = new ArrayList<>();\n    filteredCustomerList = new ArrayList<>();\n    apiInterface = AkgApiClient.getApiClient().create(AkgApiInterface.class);\n\n    loginResponse = new Gson().fromJson(preferences.getLoginResponse(),\n        AkgLoginResponse.class);\n\n    Log.d(TAG, \"onCreate: \" + loginResponse.getData().getPassword() + \" \" + loginResponse.getData().getUserId());\n\n    basicAuthorization = Credentials.basic(String.valueOf(loginResponse.getData().getUserId()),\n        preferences.getPassword());\n\n    getAllCustomer();\n    setupToggleGroup();\n\n    RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);\n    giftListAdapter = new GiftListAdapter(this, giftModelList, new GiftListAdapterInterface() {\n      @Override\n      public void onPlusClicked(int position) {\n        isInputChangedByUser = false;\n        if (giftModelList.get(position).getSliderQty() <= Integer.parseInt(txtQuantity.getEditText().getText().toString())){\n          txtQuantity.getEditText().setText(String.valueOf(Integer.parseInt(txtQuantity.getEditText().getText().toString()) - giftModelList.get(position).getSliderQty()));\n          giftModelList.get(position).setProductQuantity(giftModelList.get(position).getProductQuantity() + 1);\n          giftListAdapter.setData(giftModelList);\n        }\n      }\n\n      @Override\n      public void onMinusClicked(int position) {\n        isInputChangedByUser = false;\n        if (giftModelList.get(position).getProductQuantity() <= 0) {\n\n        } else {\n          txtQuantity.getEditText().setText(String.valueOf(Integer.parseInt(txtQuantity.getEditText().getText().toString()) + giftModelList.get(position).getSliderQty()));\n          giftModelList.get(position).setProductQuantity(giftModelList.get(position).getProductQuantity() - 1);\n          giftListAdapter.setData(giftModelList);\n        }\n      }\n    });\n    recyclerView.setLayoutManager(layoutManager);\n    recyclerView.setAdapter(giftListAdapter);\n\n    getGifts();\n\n    txtQuantity.getEditText().setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        isInputChangedByUser = true;\n      }\n    });\n\n    txtQuantity.getEditText().addTextChangedListener(new TextWatcher() {\n      @Override\n      public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n\n      }\n\n      @Override\n      public void onTextChanged(CharSequence s, int start, int before, int count) {\n\n      }\n\n      @Override\n      public void afterTextChanged(Editable s) {\n        if (!TextUtils.isEmpty(txtQuantity.getEditText().getText()) && isInputChangedByUser) {\n          getGifts();\n        }\n      }\n    });\n  }\n\n  private void getGifts() {\n    giftModelList = new RealMDatabaseManager().prepareGiftModel();\n    giftListAdapter.setData(giftModelList);\n  }\n\n  private void setupToolbar() {\n    setSupportActionBar(toolbar);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      toolbar.setTitleTextColor(getResources().getColor(android.R.color.white, null));\n    } else {\n      toolbar.setTitleTextColor(getResources().getColor(android.R.color.white));\n    }\n\n    if (getSupportActionBar() != null) {\n      getSupportActionBar().setTitle(getResources().getString(R.string.slider_collect));\n      getSupportActionBar().setDisplayShowTitleEnabled(true);\n      getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n    }\n\n    toolbar.setNavigationOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        onBackPressed();\n      }\n    });\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\n      toolbar.getNavigationIcon().setColorFilter(new BlendModeColorFilter(Color.WHITE,\n          BlendMode.SRC_ATOP));\n    } else {\n      toolbar.getNavigationIcon().setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP);\n    }\n  }\n\n\n  @Override\n  protected void onStart() {\n    super.onStart();\n\n    btnSubmit.setOnClickListener(view -> {\n\n      if (selectedCustomer == null) {\n        Toast.makeText(this, getResources().getString(R.string.msg_customer_select_error), Toast.LENGTH_SHORT).show();\n      } else if (TextUtils.isEmpty(txtQuantity.getEditText().getText())) {\n        txtQuantity.setError(getResources().getString(R.string.msg_packet_quantity_not_given));\n      } else {\n        progressBar.setVisibility(View.VISIBLE);\n        SmartLocation.with(SlideCollectionActivity.this).location()\n            .oneFix()\n            .start(new OnLocationUpdatedListener() {\n              @Override\n              public void onLocationUpdated(Location location) {\n\n                Log.d(TAG, \"current location: \" + location.getLatitude() + \":\" + location.getLatitude());\n                Log.d(TAG, \"customer location: \" + selectedCustomer.getLat() + \":\" + selectedCustomer.getLng());\n\n                Double distance = LocationUtils.getDistance(selectedCustomer.getLat(), selectedCustomer.getLng(),\n                    location.getLatitude(), location.getLongitude());\n\n                double distanceThreshold = 10.0;\n                for (GlobalSettings settings : loginResponse.getData().getGlobalSettingList()) {\n                  if (settings.getAttributeName().equalsIgnoreCase(\"DISTANCE_RANGE\")) {\n                    distanceThreshold = Double.parseDouble(settings.getAttributeValue());\n                  }\n                }\n                Log.d(TAG, \"cur dis: \" + distance);\n                Log.d(TAG, \"global distance:\" + distanceThreshold);\n                if (distance > distanceThreshold) {\n                  Toast.makeText(SlideCollectionActivity.this, \"আপনি কাস্টমার থেকে দূরে অবস্থান করছেন!\",\n                      Toast.LENGTH_SHORT).show();\n                  progressBar.setVisibility(View.GONE);\n                } else {\n                  sendSliderInfo();\n                }\n              }\n            });\n      }\n\n    });\n\n  }\n\n  public void sendSliderInfo() {\n\n    Slider slider = new Slider();\n    slider.setCollectionDate(new Date().getTime());\n    slider.setCustomerId(selectedCustomer.getId());\n    slider.setQuantity(Integer.valueOf(txtQuantity.getEditText().getText().toString()));\n    slider.setSalesRepId(loginResponse.getData().getId());\n\n    // collect slider\n    Call<ResponseBody> call = apiInterface.collectSlider(basicAuthorization, slider);\n    call.enqueue(new Callback<ResponseBody>() {\n      @Override\n      public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\n        if (response.isSuccessful()) {\n          Toast.makeText(SlideCollectionActivity.this, getResources().getString(R.string.msg_slider_collect_success), Toast.LENGTH_SHORT).show();\n\n        } else {\n          Toast.makeText(SlideCollectionActivity.this, \"Error:\" + response.message(), Toast.LENGTH_SHORT).show();\n        }\n        progressBar.setVisibility(View.GONE);\n      }\n\n      @Override\n      public void onFailure(Call<ResponseBody> call, Throwable t) {\n        Toast.makeText(SlideCollectionActivity.this, t.getMessage(), Toast.LENGTH_SHORT).show();\n        call.cancel();\n        progressBar.setVisibility(View.GONE);\n      }\n    });\n\n  }\n\n  private void setupToggleGroup() {\n    toggleGroup.setOnCheckedChangeListener(new SingleSelectToggleGroup.OnCheckedChangeListener() {\n      @Override\n      public void onCheckedChanged(SingleSelectToggleGroup group, int checkedId) {\n        switch (checkedId) {\n          case R.id.choice_a:\n            filterCustomers(\"a\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_b:\n            filterCustomers(\"b\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_c:\n            filterCustomers(\"c\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_d:\n            filterCustomers(\"d\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_e:\n            filterCustomers(\"e\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_f:\n            filterCustomers(\"f\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_g:\n            filterCustomers(\"g\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_h:\n            filterCustomers(\"h\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_i:\n            filterCustomers(\"i\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_j:\n            filterCustomers(\"j\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_k:\n            filterCustomers(\"k\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_l:\n            filterCustomers(\"l\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_m:\n            filterCustomers(\"m\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_n:\n            filterCustomers(\"n\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_o:\n            filterCustomers(\"o\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_p:\n            filterCustomers(\"p\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_q:\n            filterCustomers(\"q\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_r:\n            filterCustomers(\"r\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_s:\n            filterCustomers(\"s\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_t:\n            filterCustomers(\"t\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_u:\n            filterCustomers(\"u\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_v:\n            filterCustomers(\"v\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_w:\n            filterCustomers(\"w\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_x:\n            filterCustomers(\"x\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_y:\n            filterCustomers(\"y\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_z:\n            filterCustomers(\"z\");\n            spinnerUsers.setSelection(0);\n            break;\n          case R.id.choice_all:\n            filterCustomers(\"all\");\n            spinnerUsers.setSelection(0);\n            break;\n        }\n      }\n    });\n  }\n\n  private void filterCustomers(String start) {\n    filteredCustomerList.clear();\n    filteredCustomerList.add(new CustomerData(\"Select Customer\"));\n    if (start.toLowerCase().equalsIgnoreCase(\"all\")) {\n      filteredCustomerList.addAll(customerDataList);\n    } else {\n      for (CustomerData customerData : customerDataList) {\n        if (customerData.getCustomerName().toLowerCase().startsWith(start.toLowerCase())) {\n          filteredCustomerList.add(customerData);\n        }\n      }\n    }\n    Log.d(TAG, \"filterCustomers: filteredCustomerList = \" + filteredCustomerList);\n    spinnerAdapter.notifyDataSetChanged();\n  }\n\n  private void getAllCustomer() {\n    customerDataList = realMDatabaseManager.prepareCustomerData();\n    filteredCustomerList.clear();\n    filteredCustomerList.add(new CustomerData(getResources().getString(R.string.customer_select)));\n    filteredCustomerList.addAll(customerDataList);\n    spinnerAdapter = new CustomArrayAdapter(SlideCollectionActivity.this, R.layout.spinner_item, filteredCustomerList);\n    spinnerUsers.setAdapter(spinnerAdapter);\n    spinnerUsers.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n      @Override\n      public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n        if (position > 0) {\n          CustomerData customerData = filteredCustomerList.get(position);\n          selectedCustomer = customerData;\n        }\n      }\n\n      @Override\n      public void onNothingSelected(AdapterView<?> parent) {\n\n      }\n    });\n  }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/suffix/fieldforce/akg/activity/SlideCollectionActivity.java	(revision ffa89e67050be0f9a36dda7b4ef647e3ce76daf8)
+++ app/src/main/java/com/suffix/fieldforce/akg/activity/SlideCollectionActivity.java	(date 1608047713000)
@@ -128,7 +128,7 @@
       @Override
       public void onPlusClicked(int position) {
         isInputChangedByUser = false;
-        if (giftModelList.get(position).getSliderQty() <= Integer.parseInt(txtQuantity.getEditText().getText().toString())){
+        if (giftModelList.get(position).getSliderQty() <= Integer.parseInt(txtQuantity.getEditText().getText().toString())) {
           txtQuantity.getEditText().setText(String.valueOf(Integer.parseInt(txtQuantity.getEditText().getText().toString()) - giftModelList.get(position).getSliderQty()));
           giftModelList.get(position).setProductQuantity(giftModelList.get(position).getProductQuantity() + 1);
           giftListAdapter.setData(giftModelList);
@@ -219,7 +219,6 @@
     super.onStart();
 
     btnSubmit.setOnClickListener(view -> {
-
       if (selectedCustomer == null) {
         Toast.makeText(this, getResources().getString(R.string.msg_customer_select_error), Toast.LENGTH_SHORT).show();
       } else if (TextUtils.isEmpty(txtQuantity.getEditText().getText())) {
@@ -256,9 +255,7 @@
               }
             });
       }
-
     });
-
   }
 
   public void sendSliderInfo() {
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"ProjectCodeStyleConfiguration\">\n  <code_scheme name=\"Project\" version=\"173\">\n    <option name=\"OTHER_INDENT_OPTIONS\">\n      <value>\n        <option name=\"INDENT_SIZE\" value=\"2\" />\n        <option name=\"TAB_SIZE\" value=\"2\" />\n      </value>\n    </option>\n    <JetCodeStyleSettings>\n      <option name=\"PACKAGES_TO_USE_STAR_IMPORTS\">\n        <value>\n          <package name=\"java.util\" withSubpackages=\"false\" static=\"false\" />\n          <package name=\"kotlinx.android.synthetic\" withSubpackages=\"true\" static=\"false\" />\n          <package name=\"io.ktor\" withSubpackages=\"true\" static=\"false\" />\n        </value>\n      </option>\n      <option name=\"CODE_STYLE_DEFAULTS\" value=\"KOTLIN_OFFICIAL\" />\n    </JetCodeStyleSettings>\n    <Objective-C>\n      <option name=\"INDENT_NAMESPACE_MEMBERS\" value=\"2\" />\n      <option name=\"INDENT_C_STRUCT_MEMBERS\" value=\"2\" />\n      <option name=\"INDENT_CLASS_MEMBERS\" value=\"2\" />\n      <option name=\"INDENT_INSIDE_CODE_BLOCK\" value=\"2\" />\n    </Objective-C>\n    <codeStyleSettings language=\"CMake\">\n      <indentOptions>\n        <option name=\"INDENT_SIZE\" value=\"2\" />\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n        <option name=\"TAB_SIZE\" value=\"2\" />\n      </indentOptions>\n    </codeStyleSettings>\n    <codeStyleSettings language=\"Groovy\">\n      <indentOptions>\n        <option name=\"INDENT_SIZE\" value=\"2\" />\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n        <option name=\"TAB_SIZE\" value=\"2\" />\n      </indentOptions>\n    </codeStyleSettings>\n    <codeStyleSettings language=\"HTML\">\n      <indentOptions>\n        <option name=\"INDENT_SIZE\" value=\"2\" />\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n        <option name=\"TAB_SIZE\" value=\"2\" />\n      </indentOptions>\n    </codeStyleSettings>\n    <codeStyleSettings language=\"JAVA\">\n      <indentOptions>\n        <option name=\"INDENT_SIZE\" value=\"2\" />\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n        <option name=\"TAB_SIZE\" value=\"2\" />\n      </indentOptions>\n    </codeStyleSettings>\n    <codeStyleSettings language=\"JSON\">\n      <indentOptions>\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n        <option name=\"TAB_SIZE\" value=\"2\" />\n      </indentOptions>\n    </codeStyleSettings>\n    <codeStyleSettings language=\"ObjectiveC\">\n      <indentOptions>\n        <option name=\"INDENT_SIZE\" value=\"2\" />\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n        <option name=\"TAB_SIZE\" value=\"2\" />\n      </indentOptions>\n    </codeStyleSettings>\n    <codeStyleSettings language=\"XML\">\n      <indentOptions>\n        <option name=\"INDENT_SIZE\" value=\"2\" />\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n        <option name=\"TAB_SIZE\" value=\"2\" />\n      </indentOptions>\n      <arrangement>\n        <rules>\n          <section>\n            <rule>\n              <match>\n                <AND>\n                  <NAME>xmlns:android</NAME>\n                  <XML_ATTRIBUTE />\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\n                </AND>\n              </match>\n            </rule>\n          </section>\n          <section>\n            <rule>\n              <match>\n                <AND>\n                  <NAME>xmlns:.*</NAME>\n                  <XML_ATTRIBUTE />\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\n                </AND>\n              </match>\n              <order>BY_NAME</order>\n            </rule>\n          </section>\n          <section>\n            <rule>\n              <match>\n                <AND>\n                  <NAME>.*:id</NAME>\n                  <XML_ATTRIBUTE />\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\n                </AND>\n              </match>\n            </rule>\n          </section>\n          <section>\n            <rule>\n              <match>\n                <AND>\n                  <NAME>.*:name</NAME>\n                  <XML_ATTRIBUTE />\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\n                </AND>\n              </match>\n            </rule>\n          </section>\n          <section>\n            <rule>\n              <match>\n                <AND>\n                  <NAME>name</NAME>\n                  <XML_ATTRIBUTE />\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\n                </AND>\n              </match>\n            </rule>\n          </section>\n          <section>\n            <rule>\n              <match>\n                <AND>\n                  <NAME>style</NAME>\n                  <XML_ATTRIBUTE />\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\n                </AND>\n              </match>\n            </rule>\n          </section>\n          <section>\n            <rule>\n              <match>\n                <AND>\n                  <NAME>.*</NAME>\n                  <XML_ATTRIBUTE />\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\n                </AND>\n              </match>\n              <order>BY_NAME</order>\n            </rule>\n          </section>\n          <section>\n            <rule>\n              <match>\n                <AND>\n                  <NAME>.*</NAME>\n                  <XML_ATTRIBUTE />\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\n                </AND>\n              </match>\n              <order>ANDROID_ATTRIBUTE_ORDER</order>\n            </rule>\n          </section>\n          <section>\n            <rule>\n              <match>\n                <AND>\n                  <NAME>.*</NAME>\n                  <XML_ATTRIBUTE />\n                  <XML_NAMESPACE>.*</XML_NAMESPACE>\n                </AND>\n              </match>\n              <order>BY_NAME</order>\n            </rule>\n          </section>\n        </rules>\n      </arrangement>\n    </codeStyleSettings>\n    <codeStyleSettings language=\"kotlin\">\n      <option name=\"CODE_STYLE_DEFAULTS\" value=\"KOTLIN_OFFICIAL\" />\n      <indentOptions>\n        <option name=\"INDENT_SIZE\" value=\"2\" />\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n        <option name=\"TAB_SIZE\" value=\"2\" />\n      </indentOptions>\n    </codeStyleSettings>\n  </code_scheme>\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyles/Project.xml	(revision ffa89e67050be0f9a36dda7b4ef647e3ce76daf8)
+++ .idea/codeStyles/Project.xml	(date 1608047713000)
@@ -9,9 +9,18 @@
     <JetCodeStyleSettings>
       <option name="PACKAGES_TO_USE_STAR_IMPORTS">
         <value>
-          <package name="java.util" withSubpackages="false" static="false" />
-          <package name="kotlinx.android.synthetic" withSubpackages="true" static="false" />
-          <package name="io.ktor" withSubpackages="true" static="false" />
+          <package name="java.util" alias="false" withSubpackages="false" />
+          <package name="kotlinx.android.synthetic" alias="false" withSubpackages="true" />
+          <package name="io.ktor" alias="false" withSubpackages="true" />
+        </value>
+      </option>
+      <option name="PACKAGES_IMPORT_LAYOUT">
+        <value>
+          <package name="" alias="false" withSubpackages="true" />
+          <package name="java" alias="false" withSubpackages="true" />
+          <package name="javax" alias="false" withSubpackages="true" />
+          <package name="kotlin" alias="false" withSubpackages="true" />
+          <package name="" alias="true" withSubpackages="true" />
         </value>
       </option>
       <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
